push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Integer
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Integer
push  
#Skip
push 1
push 1
push 1
success #Skip
{ type: '#Skip', value: '  ' }
#Skip
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Integer
push  
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
push  
#Skip
push s
push s
push s
success #Skip
{ type: '#Skip', value: '   ' }
#Skip
push s
#Skip
push s
push s
push s
#Skip
push s
Integer
push s
push n
#Skip
push n
push n
push n
#Skip
push n
Name
push null
'name'
success Name
{ type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push { type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Name
push null
push n
#Skip
push n
push n
push n
#Skip
push n
Name
push  
push  
push  
'name'
success Name
{ type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push { type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push  
#Skip
push 1
push 1
push 1
success #Skip
{ type: '#Skip', value: ' ' }
#Skip
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Integer
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Name
push null
push g
#Skip
push g
push g
push g
#Skip
push g
Name
push _
push _
push null
'get_name'
success Name
{ type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push { type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Name
push null
push  
#Skip
push n
push n
push n
success #Skip
{ type: '#Skip', value: '  ' }
#Skip
push n
#Skip
push n
push n
push n
#Skip
push n
Name
push  
push  
push  
'name'
success Name
{ type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push { type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push  
#Skip
push null
push null
push null
success #Skip
{ type: '#Skip', value: '   ' }
#Skip
push null
#Skip
push null
push null
push null
#Skip
push null
Name
push null
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Statement
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression
false
next 1
push 1
Expression
true
next 1
push 1
Expression
class
next 1
push 1
Expression
def
next 1
push 1
Expression
if
next 1
push 1
Expression
if
next 1
push 1
Expression
unless
next 1
push 1
Expression
unless
next 1
push 1
Expression
while
next 1
push 1
Expression
until
next 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression1
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression0
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Term
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Integer
push +
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Multiply
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Divide
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push +
#Skip
push +
push +
push +
#Skip
push +
Plus
success Plus
{ type: 'Plus', value: '+' }
push { type: 'Plus', value: '+' }
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression0
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Term
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Integer
push 

success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Multiply
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Divide
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Plus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Minus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Equal
==
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

NotEqual
!=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

LessEqual
<=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

GreaterEqual
>=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Less
push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Greater
push 

push { type: 'Expression', value: { evaluate: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
success Statement
{ type: 'Statement', value: { evaluate: [Function] } }
push { type: 'Statement', value: { evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Statement
#Skip
push null
push null
push null
#Skip
push null
Expression
false
next null
push null
Expression
true
next null
push null
Expression
class
next null
push null
Expression
def
next null
push null
Expression
if
next null
push null
Expression
if
next null
push null
Expression
unless
next null
push null
Expression
unless
next null
push null
Expression
while
next null
push null
Expression
until
next null
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Expression1
#Skip
push null
push null
push null
#Skip
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
Term
#Skip
push null
push null
push null
#Skip
push null
Integer
Term
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
LeftParenthesis
push null
Statement
push null
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Statement
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression
false
next 1
push 1
Expression
true
next 1
push 1
Expression
class
next 1
push 1
Expression
def
next 1
push 1
Expression
if
next 1
push 1
Expression
if
next 1
push 1
Expression
unless
next 1
push 1
Expression
unless
next 1
push 1
Expression
while
next 1
push 1
Expression
until
next 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression1
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression0
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Term
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Integer
push +
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Multiply
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Divide
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push +
#Skip
push +
push +
push +
#Skip
push +
Plus
success Plus
{ type: 'Plus', value: '+' }
push { type: 'Plus', value: '+' }
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression0
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Term
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Integer
push 

success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Multiply
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Divide
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Plus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Minus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Equal
==
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

NotEqual
!=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

LessEqual
<=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

GreaterEqual
>=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Less
push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Greater
push 

push { type: 'Expression', value: { evaluate: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
success Statement
{ type: 'Statement', value: { evaluate: [Function] } }
push { type: 'Statement', value: { evaluate: [Function] } }
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Statement
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Expression
false
next 3
push 3
Expression
true
next 3
push 3
Expression
class
next 3
push 3
Expression
def
next 3
push 3
Expression
if
next 3
push 3
Expression
if
next 3
push 3
Expression
unless
next 3
push 3
Expression
unless
next 3
push 3
Expression
while
next 3
push 3
Expression
until
next 3
push 3
Expression
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Name
push 3
push 3
push 3
Expression
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Name
push 3
push 3
push 3
Expression
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Name
push 3
push 3
push 3
Expression
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Name
push 3
push 3
push 3
Expression
push 3
Expression
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Expression1
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Expression0
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Term
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Integer
push +
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Multiply
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Divide
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push +
#Skip
push +
push +
push +
#Skip
push +
Plus
success Plus
{ type: 'Plus', value: '+' }
push { type: 'Plus', value: '+' }
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression0
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Term
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Integer
push 

success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Multiply
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Divide
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Plus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Minus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Equal
==
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

NotEqual
!=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

LessEqual
<=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

GreaterEqual
>=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Less
push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Greater
push 

push { type: 'Expression', value: { evaluate: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
success Statement
{ type: 'Statement', value: { evaluate: [Function] } }
push { type: 'Statement', value: { evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Statement
#Skip
push null
push null
push null
#Skip
push null
Expression
false
next null
push null
Expression
true
next null
push null
Expression
class
next null
push null
Expression
def
next null
push null
Expression
if
next null
push null
Expression
if
next null
push null
Expression
unless
next null
push null
Expression
unless
next null
push null
Expression
while
next null
push null
Expression
until
next null
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Expression1
#Skip
push null
push null
push null
#Skip
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
Term
#Skip
push null
push null
push null
#Skip
push null
Integer
Term
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
LeftParenthesis
push null
Statement
push null
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Statement
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression
false
next 1
push 1
Expression
true
next 1
push 1
Expression
class
next 1
push 1
Expression
def
next 1
push 1
Expression
if
next 1
push 1
Expression
if
next 1
push 1
Expression
unless
next 1
push 1
Expression
unless
next 1
push 1
Expression
while
next 1
push 1
Expression
until
next 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression1
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression0
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Term
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Integer
push +
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Multiply
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Divide
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push +
#Skip
push +
push +
push +
#Skip
push +
Plus
success Plus
{ type: 'Plus', value: '+' }
push { type: 'Plus', value: '+' }
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression0
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Term
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Integer
push ;
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Multiply
push ;
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Divide
push ;
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Plus
push ;
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Minus
push ;
push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Equal
==
next ;
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
NotEqual
!=
next ;
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
LessEqual
<=
next ;
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
GreaterEqual
>=
next ;
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Less
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Greater
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
EndOfStatement
push ;
success EndOfStatement
{ type: 'EndOfStatement', value: ';' }
push { type: 'EndOfStatement', value: ';' }
success Statement
{ type: 'Statement', value: { evaluate: [Function] } }
push { type: 'Statement', value: { evaluate: [Function] } }
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Statement
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Expression
false
next 3
push 3
Expression
true
next 3
push 3
Expression
class
next 3
push 3
Expression
def
next 3
push 3
Expression
if
next 3
push 3
Expression
if
next 3
push 3
Expression
unless
next 3
push 3
Expression
unless
next 3
push 3
Expression
while
next 3
push 3
Expression
until
next 3
push 3
Expression
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Name
push 3
push 3
push 3
Expression
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Name
push 3
push 3
push 3
Expression
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Name
push 3
push 3
push 3
Expression
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Name
push 3
push 3
push 3
Expression
push 3
Expression
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Expression1
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Expression0
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Term
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Integer
push +
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Multiply
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Divide
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push +
#Skip
push +
push +
push +
#Skip
push +
Plus
success Plus
{ type: 'Plus', value: '+' }
push { type: 'Plus', value: '+' }
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression0
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Term
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Integer
push ;
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Multiply
push ;
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Divide
push ;
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Plus
push ;
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Minus
push ;
push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Equal
==
next ;
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
NotEqual
!=
next ;
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
LessEqual
<=
next ;
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
GreaterEqual
>=
next ;
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Less
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
Greater
push ;
push { type: 'Expression', value: { evaluate: [Function] } }
push ;
#Skip
push ;
push ;
push ;
#Skip
push ;
EndOfStatement
push ;
success EndOfStatement
{ type: 'EndOfStatement', value: ';' }
push { type: 'EndOfStatement', value: ';' }
success Statement
{ type: 'Statement', value: { evaluate: [Function] } }
push { type: 'Statement', value: { evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Statement
#Skip
push null
push null
push null
#Skip
push null
Expression
false
next null
push null
Expression
true
next null
push null
Expression
class
next null
push null
Expression
def
next null
push null
Expression
if
next null
push null
Expression
if
next null
push null
Expression
unless
next null
push null
Expression
unless
next null
push null
Expression
while
next null
push null
Expression
until
next null
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Expression1
#Skip
push null
push null
push null
#Skip
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
Term
#Skip
push null
push null
push null
#Skip
push null
Integer
Term
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
LeftParenthesis
push null
Statement
push null
Get while expression
push w
#Skip
push w
push w
push w
#Skip
push w
Expression
false
next w
push w
Expression
true
next w
push w
Expression
class
next w
push w
Expression
def
next w
push w
Expression
if
next w
push w
Expression
if
next w
push w
Expression
unless
next w
push w
Expression
unless
next w
push w
Expression
while
next w
next h
next i
next l
next e
success while
push  
#Skip
push 1
push 1
push 1
success #Skip
{ type: '#Skip', value: ' ' }
#Skip
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression
false
next 1
push 1
Expression
true
next 1
push 1
Expression
class
next 1
push 1
Expression
def
next 1
push 1
Expression
if
next 1
push 1
Expression
if
next 1
push 1
Expression
unless
next 1
push 1
Expression
unless
next 1
push 1
Expression
while
next 1
push 1
Expression
until
next 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression1
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression0
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Term
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Integer
push 

success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Multiply
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Divide
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Plus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Minus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Equal
==
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

NotEqual
!=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

LessEqual
<=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

GreaterEqual
>=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Less
push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Greater
push 

push { type: 'Expression', value: { evaluate: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
push a
#Skip
push a
push a
push a
#Skip
push a
Suite
end
next a
push a
Suite
else
next a
push a
Suite
push a
#Skip
push a
push a
push a
#Skip
push a
Statement
push a
#Skip
push a
push a
push a
#Skip
push a
Expression
false
next a
push a
Expression
true
next a
push a
Expression
class
next a
push a
Expression
def
next a
push a
Expression
if
next a
push a
Expression
if
next a
push a
Expression
unless
next a
push a
Expression
unless
next a
push a
Expression
while
next a
push a
Expression
until
next a
push a
Expression
push a
#Skip
push a
push a
push a
#Skip
push a
Name
push =
push =
push =
'a'
success Name
{ type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push { type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push =
#Skip
push =
push =
push =
#Skip
push =
Assign
success Assign
{ type: 'Assign', value: '=' }
push { type: 'Assign', value: '=' }
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression
false
next 1
push 1
Expression
true
next 1
push 1
Expression
class
next 1
push 1
Expression
def
next 1
push 1
Expression
if
next 1
push 1
Expression
if
next 1
push 1
Expression
unless
next 1
push 1
Expression
unless
next 1
push 1
Expression
while
next 1
push 1
Expression
until
next 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression1
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression0
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Term
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Integer
push 

success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Multiply
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Divide
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Plus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Minus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Equal
==
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

NotEqual
!=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

LessEqual
<=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

GreaterEqual
>=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Less
push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Greater
push 

push { type: 'Expression', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Equal
==
next 

push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

NotEqual
!=
next 

push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

LessEqual
<=
next 

push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

GreaterEqual
>=
next 

push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Less
push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Greater
push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
success Statement
{ type: 'Statement',
  value: { evaluate: [Function], getName: [Function] } }
push { type: 'Statement',
  value: { evaluate: [Function], getName: [Function] } }
push e
#Skip
push e
push e
push e
#Skip
push e
Suite
end
next e
next n
next d
success end
push end
success Suite
{ type: 'Suite', value: [] }
push { type: 'Suite', value: [] }
success Suite
{ type: 'Suite',
  value: [ { evaluate: [Function], getName: [Function] } ] }
push { type: 'Suite',
  value: [ { evaluate: [Function], getName: [Function] } ] }
end
next e
next n
next d
success end
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Equal
==
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
NotEqual
!=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
LessEqual
<=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
GreaterEqual
>=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Less
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Greater
push null
push { type: 'Expression', value: { evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Expression
false
next null
push null
Expression
true
next null
push null
Expression
class
next null
push null
Expression
def
next null
push null
Expression
if
next null
push null
Expression
if
next null
push null
Expression
unless
next null
push null
Expression
unless
next null
push null
Expression
while
next null
push null
Expression
until
next null
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Expression1
#Skip
push null
push null
push null
#Skip
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
Term
#Skip
push null
push null
push null
#Skip
push null
Integer
Term
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
LeftParenthesis
push null
push u
#Skip
push u
push u
push u
#Skip
push u
Expression
false
next u
push u
Expression
true
next u
push u
Expression
class
next u
push u
Expression
def
next u
push u
Expression
if
next u
push u
Expression
if
next u
push u
Expression
unless
next u
next n
next t
push t
push un
Expression
unless
next u
next n
next t
push t
push un
Expression
while
next u
push u
Expression
until
next u
next n
next t
next i
next l
success until
push  
#Skip
push 1
push 1
push 1
success #Skip
{ type: '#Skip', value: ' ' }
#Skip
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression
false
next 1
push 1
Expression
true
next 1
push 1
Expression
class
next 1
push 1
Expression
def
next 1
push 1
Expression
if
next 1
push 1
Expression
if
next 1
push 1
Expression
unless
next 1
push 1
Expression
unless
next 1
push 1
Expression
while
next 1
push 1
Expression
until
next 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression1
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression0
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Term
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Integer
push 

success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Multiply
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Divide
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Plus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Minus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Equal
==
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

NotEqual
!=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

LessEqual
<=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

GreaterEqual
>=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Less
push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Greater
push 

push { type: 'Expression', value: { evaluate: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
push a
#Skip
push a
push a
push a
#Skip
push a
Suite
end
next a
push a
Suite
else
next a
push a
Suite
push a
#Skip
push a
push a
push a
#Skip
push a
Statement
push a
#Skip
push a
push a
push a
#Skip
push a
Expression
false
next a
push a
Expression
true
next a
push a
Expression
class
next a
push a
Expression
def
next a
push a
Expression
if
next a
push a
Expression
if
next a
push a
Expression
unless
next a
push a
Expression
unless
next a
push a
Expression
while
next a
push a
Expression
until
next a
push a
Expression
push a
#Skip
push a
push a
push a
#Skip
push a
Name
push =
push =
push =
'a'
success Name
{ type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push { type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push =
#Skip
push =
push =
push =
#Skip
push =
Assign
success Assign
{ type: 'Assign', value: '=' }
push { type: 'Assign', value: '=' }
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression
false
next 1
push 1
Expression
true
next 1
push 1
Expression
class
next 1
push 1
Expression
def
next 1
push 1
Expression
if
next 1
push 1
Expression
if
next 1
push 1
Expression
unless
next 1
push 1
Expression
unless
next 1
push 1
Expression
while
next 1
push 1
Expression
until
next 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Name
push 1
push 1
push 1
Expression
push 1
Expression
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression1
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Expression0
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Term
push 1
#Skip
push 1
push 1
push 1
#Skip
push 1
Integer
push 

success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Multiply
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push 

#Skip
push 

push 

push 

#Skip
push 

Divide
push 

push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Plus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push 

#Skip
push 

push 

push 

#Skip
push 

Minus
push 

push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Equal
==
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

NotEqual
!=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

LessEqual
<=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

GreaterEqual
>=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Less
push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Greater
push 

push { type: 'Expression', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Equal
==
next 

push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

NotEqual
!=
next 

push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

LessEqual
<=
next 

push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

GreaterEqual
>=
next 

push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Less
push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Greater
push 

push { type: 'Expression',
  value: { evaluate: [Function], getName: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
success Statement
{ type: 'Statement',
  value: { evaluate: [Function], getName: [Function] } }
push { type: 'Statement',
  value: { evaluate: [Function], getName: [Function] } }
push e
#Skip
push e
push e
push e
#Skip
push e
Suite
end
next e
next n
next d
success end
push end
success Suite
{ type: 'Suite', value: [] }
push { type: 'Suite', value: [] }
success Suite
{ type: 'Suite',
  value: [ { evaluate: [Function], getName: [Function] } ] }
push { type: 'Suite',
  value: [ { evaluate: [Function], getName: [Function] } ] }
end
next e
next n
next d
success end
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Equal
==
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
NotEqual
!=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
LessEqual
<=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
GreaterEqual
>=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Less
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Greater
push null
push { type: 'Expression', value: { evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Expression
false
next null
push null
Expression
true
next null
push null
Expression
class
next null
push null
Expression
def
next null
push null
Expression
if
next null
push null
Expression
if
next null
push null
Expression
unless
next null
push null
Expression
unless
next null
push null
Expression
while
next null
push null
Expression
until
next null
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Expression1
#Skip
push null
push null
push null
#Skip
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
Term
#Skip
push null
push null
push null
#Skip
push null
Integer
Term
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
LeftParenthesis
push null
push c
#Skip
push c
push c
push c
#Skip
push c
Expression
false
next c
push c
Expression
true
next c
push c
Expression
class
next c
next l
next a
next s
next s
success class
push  
#Skip
push D
push D
push D
success #Skip
{ type: '#Skip', value: ' ' }
#Skip
push D
#Skip
push D
push D
push D
#Skip
push D
Name
push D
push 

push 

push 

'Dog'
success Name
{ type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push { type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
push e
#Skip
push e
push e
push e
#Skip
push e
Suite
end
next e
next n
next d
success end
push end
success Suite
{ type: 'Suite', value: [] }
push { type: 'Suite', value: [] }
end
next e
next n
next d
success end
success Expression
{ type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Equal
==
next null
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
NotEqual
!=
next null
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
LessEqual
<=
next null
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
GreaterEqual
>=
next null
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Less
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Greater
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Expression
false
next null
push null
Expression
true
next null
push null
Expression
class
next null
push null
Expression
def
next null
push null
Expression
if
next null
push null
Expression
if
next null
push null
Expression
unless
next null
push null
Expression
unless
next null
push null
Expression
while
next null
push null
Expression
until
next null
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Expression1
#Skip
push null
push null
push null
#Skip
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
Term
#Skip
push null
push null
push null
#Skip
push null
Integer
Term
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
LeftParenthesis
push null
push c
#Skip
push c
push c
push c
#Skip
push c
Expression
false
next c
push c
Expression
true
next c
push c
Expression
class
next c
next l
next a
next s
next s
success class
push  
#Skip
push D
push D
push D
success #Skip
{ type: '#Skip', value: ' ' }
#Skip
push D
#Skip
push D
push D
push D
#Skip
push D
Name
push D
push 

push 

push 

'Dog'
success Name
{ type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push { type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
push d
#Skip
push d
push d
push d
#Skip
push d
Suite
end
next d
push d
Suite
else
next d
push d
Suite
push d
#Skip
push d
push d
push d
#Skip
push d
Statement
push d
#Skip
push d
push d
push d
#Skip
push d
Expression
false
next d
push d
Expression
true
next d
push d
Expression
class
next d
push d
Expression
def
next d
next e
next f
success def
push  
#Skip
push f
push f
push f
success #Skip
{ type: '#Skip', value: ' ' }
#Skip
push f
#Skip
push f
push f
push f
#Skip
push f
Name
push 

push 

push 

'foo'
success Name
{ type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push { type: 'Name',
  value: 
   { evaluate: [Function],
     getName: [Function],
     setValue: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
push e
#Skip
push e
push e
push e
#Skip
push e
Suite
end
next e
next n
next d
success end
push end
success Suite
{ type: 'Suite', value: [] }
push { type: 'Suite', value: [] }
end
next e
next n
next d
success end
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Equal
==
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

NotEqual
!=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

LessEqual
<=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

GreaterEqual
>=
next 

push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Less
push 

push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push 

#Skip
push 

push 

push 

#Skip
push 

Greater
push 

push { type: 'Expression', value: { evaluate: [Function] } }
push 

#Skip
push 

push 

push 

#Skip
push 

EndOfStatement
success EndOfStatement
{ type: 'EndOfStatement', value: '\n' }
push { type: 'EndOfStatement', value: '\n' }
success Statement
{ type: 'Statement', value: { evaluate: [Function] } }
push { type: 'Statement', value: { evaluate: [Function] } }
push e
#Skip
push e
push e
push e
#Skip
push e
Suite
end
next e
next n
next d
success end
push end
success Suite
{ type: 'Suite', value: [] }
push { type: 'Suite', value: [] }
success Suite
{ type: 'Suite', value: [ { evaluate: [Function] } ] }
push { type: 'Suite', value: [ { evaluate: [Function] } ] }
end
next e
next n
next d
success end
success Expression
{ type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Equal
==
next null
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
NotEqual
!=
next null
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
LessEqual
<=
next null
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
GreaterEqual
>=
next null
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Less
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Greater
push null
push { type: 'Expression',
  value: { getName: [Function], evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Expression
false
next null
push null
Expression
true
next null
push null
Expression
class
next null
push null
Expression
def
next null
push null
Expression
if
next null
push null
Expression
if
next null
push null
Expression
unless
next null
push null
Expression
unless
next null
push null
Expression
while
next null
push null
Expression
until
next null
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Expression1
#Skip
push null
push null
push null
#Skip
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
Term
#Skip
push null
push null
push null
#Skip
push null
Integer
Term
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
LeftParenthesis
push null
push (
#Skip
push (
push (
push (
#Skip
push (
Expression
false
next (
push (
Expression
true
next (
push (
Expression
class
next (
push (
Expression
def
next (
push (
Expression
if
next (
push (
Expression
if
next (
push (
Expression
unless
next (
push (
Expression
unless
next (
push (
Expression
while
next (
push (
Expression
until
next (
push (
Expression
push (
#Skip
push (
push (
push (
#Skip
push (
Name
push (
push (
push (
Expression
push (
#Skip
push (
push (
push (
#Skip
push (
Name
push (
push (
push (
Expression
push (
#Skip
push (
push (
push (
#Skip
push (
Name
push (
push (
push (
Expression
push (
#Skip
push (
push (
push (
#Skip
push (
Name
push (
push (
push (
Expression
push (
Expression
push (
#Skip
push (
push (
push (
#Skip
push (
Expression1
push (
#Skip
push (
push (
push (
#Skip
push (
Expression0
push (
#Skip
push (
push (
push (
#Skip
push (
Term
push (
#Skip
push (
push (
push (
#Skip
push (
Integer
push (
Term
push (
#Skip
push (
push (
push (
#Skip
push (
Name
push (
push (
push (
Expression0
push (
#Skip
push (
push (
push (
#Skip
push (
LeftParenthesis
success LeftParenthesis
{ type: 'LeftParenthesis', value: '(' }
push { type: 'LeftParenthesis', value: '(' }
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression
false
next 2
push 2
Expression
true
next 2
push 2
Expression
class
next 2
push 2
Expression
def
next 2
push 2
Expression
if
next 2
push 2
Expression
if
next 2
push 2
Expression
unless
next 2
push 2
Expression
unless
next 2
push 2
Expression
while
next 2
push 2
Expression
until
next 2
push 2
Expression
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Name
push 2
push 2
push 2
Expression
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Name
push 2
push 2
push 2
Expression
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Name
push 2
push 2
push 2
Expression
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Name
push 2
push 2
push 2
Expression
push 2
Expression
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression1
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression0
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Term
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Integer
push +
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Multiply
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Divide
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push +
#Skip
push +
push +
push +
#Skip
push +
Plus
success Plus
{ type: 'Plus', value: '+' }
push { type: 'Plus', value: '+' }
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Expression0
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Term
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Integer
push )
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push )
#Skip
push )
push )
push )
#Skip
push )
Multiply
push )
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push )
#Skip
push )
push )
push )
#Skip
push )
Divide
push )
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push )
#Skip
push )
push )
push )
#Skip
push )
Plus
push )
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push )
#Skip
push )
push )
push )
#Skip
push )
Minus
push )
push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
Equal
==
next )
push )
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
NotEqual
!=
next )
push )
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
LessEqual
<=
next )
push )
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
GreaterEqual
>=
next )
push )
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
Less
push )
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
Greater
push )
push { type: 'Expression', value: { evaluate: [Function] } }
push )
#Skip
push )
push )
push )
#Skip
push )
RightParenthesis
success RightParenthesis
{ type: 'RightParenthesis', value: ')' }
push { type: 'RightParenthesis', value: ')' }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
#Skip
push null
push null
push null
#Skip
push null
Multiply
push null
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
#Skip
push null
push null
push null
#Skip
push null
Divide
push null
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
#Skip
push null
push null
push null
#Skip
push null
Plus
push null
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
#Skip
push null
push null
push null
#Skip
push null
Minus
push null
push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Equal
==
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
NotEqual
!=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
LessEqual
<=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
GreaterEqual
>=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Less
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Greater
push null
push { type: 'Expression', value: { evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Expression
false
next null
push null
Expression
true
next null
push null
Expression
class
next null
push null
Expression
def
next null
push null
Expression
if
next null
push null
Expression
if
next null
push null
Expression
unless
next null
push null
Expression
unless
next null
push null
Expression
while
next null
push null
Expression
until
next null
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Expression1
#Skip
push null
push null
push null
#Skip
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
Term
#Skip
push null
push null
push null
#Skip
push null
Integer
Term
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
LeftParenthesis
push null
push (
#Skip
push (
push (
push (
#Skip
push (
Expression
false
next (
push (
Expression
true
next (
push (
Expression
class
next (
push (
Expression
def
next (
push (
Expression
if
next (
push (
Expression
if
next (
push (
Expression
unless
next (
push (
Expression
unless
next (
push (
Expression
while
next (
push (
Expression
until
next (
push (
Expression
push (
#Skip
push (
push (
push (
#Skip
push (
Name
push (
push (
push (
Expression
push (
#Skip
push (
push (
push (
#Skip
push (
Name
push (
push (
push (
Expression
push (
#Skip
push (
push (
push (
#Skip
push (
Name
push (
push (
push (
Expression
push (
#Skip
push (
push (
push (
#Skip
push (
Name
push (
push (
push (
Expression
push (
Expression
push (
#Skip
push (
push (
push (
#Skip
push (
Expression1
push (
#Skip
push (
push (
push (
#Skip
push (
Expression0
push (
#Skip
push (
push (
push (
#Skip
push (
Term
push (
#Skip
push (
push (
push (
#Skip
push (
Integer
push (
Term
push (
#Skip
push (
push (
push (
#Skip
push (
Name
push (
push (
push (
Expression0
push (
#Skip
push (
push (
push (
#Skip
push (
LeftParenthesis
success LeftParenthesis
{ type: 'LeftParenthesis', value: '(' }
push { type: 'LeftParenthesis', value: '(' }
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression
false
next 2
push 2
Expression
true
next 2
push 2
Expression
class
next 2
push 2
Expression
def
next 2
push 2
Expression
if
next 2
push 2
Expression
if
next 2
push 2
Expression
unless
next 2
push 2
Expression
unless
next 2
push 2
Expression
while
next 2
push 2
Expression
until
next 2
push 2
Expression
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Name
push 2
push 2
push 2
Expression
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Name
push 2
push 2
push 2
Expression
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Name
push 2
push 2
push 2
Expression
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Name
push 2
push 2
push 2
Expression
push 2
Expression
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression1
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Expression0
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Term
push 2
#Skip
push 2
push 2
push 2
#Skip
push 2
Integer
push +
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Multiply
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push +
#Skip
push +
push +
push +
#Skip
push +
Divide
push +
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push +
#Skip
push +
push +
push +
#Skip
push +
Plus
success Plus
{ type: 'Plus', value: '+' }
push { type: 'Plus', value: '+' }
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Expression0
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Term
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Integer
push )
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push )
#Skip
push )
push )
push )
#Skip
push )
Multiply
push )
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push )
#Skip
push )
push )
push )
#Skip
push )
Divide
push )
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push )
#Skip
push )
push )
push )
#Skip
push )
Plus
push )
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
push )
#Skip
push )
push )
push )
#Skip
push )
Minus
push )
push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
Equal
==
next )
push )
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
NotEqual
!=
next )
push )
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
LessEqual
<=
next )
push )
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
GreaterEqual
>=
next )
push )
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
Less
push )
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
push )
#Skip
push )
push )
push )
#Skip
push )
Greater
push )
push { type: 'Expression', value: { evaluate: [Function] } }
push )
#Skip
push )
push )
push )
#Skip
push )
RightParenthesis
success RightParenthesis
{ type: 'RightParenthesis', value: ')' }
push { type: 'RightParenthesis', value: ')' }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
push *
#Skip
push *
push *
push *
#Skip
push *
Multiply
success Multiply
{ type: 'Multiply', value: '*' }
push { type: 'Multiply', value: '*' }
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Term
push 3
#Skip
push 3
push 3
push 3
#Skip
push 3
Integer
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
#Skip
push null
push null
push null
#Skip
push null
Multiply
push null
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
#Skip
push null
push null
push null
#Skip
push null
Divide
push null
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
#Skip
push null
push null
push null
#Skip
push null
Plus
push null
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
#Skip
push null
push null
push null
#Skip
push null
Minus
push null
push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Equal
==
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
NotEqual
!=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
LessEqual
<=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
GreaterEqual
>=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Less
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Greater
push null
push { type: 'Expression', value: { evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
Expression
false
next null
push null
Expression
true
next null
push null
Expression
class
next null
push null
Expression
def
next null
push null
Expression
if
next null
push null
Expression
if
next null
push null
Expression
unless
next null
push null
Expression
unless
next null
push null
Expression
while
next null
push null
Expression
until
next null
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression
push null
Expression
#Skip
push null
push null
push null
#Skip
push null
Expression1
#Skip
push null
push null
push null
#Skip
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
Term
#Skip
push null
push null
push null
#Skip
push null
Integer
Term
#Skip
push null
push null
push null
#Skip
push null
Name
push null
Expression0
#Skip
push null
push null
push null
#Skip
push null
LeftParenthesis
push null
push #
#Skip
push #
push #
push #
#Skip
success #Skip
{ type: '#Skip', value: '# this is a comment\r\n' }
#Skip
push 4
push 4
push 4
#Skip
push 4
Statement
push 4
#Skip
push 4
push 4
push 4
#Skip
push 4
Expression
false
next 4
push 4
Expression
true
next 4
push 4
Expression
class
next 4
push 4
Expression
def
next 4
push 4
Expression
if
next 4
push 4
Expression
if
next 4
push 4
Expression
unless
next 4
push 4
Expression
unless
next 4
push 4
Expression
while
next 4
push 4
Expression
until
next 4
push 4
Expression
push 4
#Skip
push 4
push 4
push 4
#Skip
push 4
Name
push 4
push 4
push 4
Expression
push 4
#Skip
push 4
push 4
push 4
#Skip
push 4
Name
push 4
push 4
push 4
Expression
push 4
#Skip
push 4
push 4
push 4
#Skip
push 4
Name
push 4
push 4
push 4
Expression
push 4
#Skip
push 4
push 4
push 4
#Skip
push 4
Name
push 4
push 4
push 4
Expression
push 4
Expression
push 4
#Skip
push 4
push 4
push 4
#Skip
push 4
Expression1
push 4
#Skip
push 4
push 4
push 4
#Skip
push 4
Expression0
push 4
#Skip
push 4
push 4
push 4
#Skip
push 4
Term
push 4
#Skip
push 4
push 4
push 4
#Skip
push 4
Integer
success Integer
{ type: 'Integer', value: { evaluate: [Function] } }
push { type: 'Integer', value: { evaluate: [Function] } }
success Term
{ type: 'Term', value: { evaluate: [Function] } }
push { type: 'Term', value: { evaluate: [Function] } }
success Expression0
{ type: 'Expression0', value: { evaluate: [Function] } }
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
#Skip
push null
push null
push null
#Skip
push null
Multiply
push null
push { type: 'Expression0', value: { evaluate: [Function] } }
Expression0
#Skip
push null
push null
push null
#Skip
push null
Divide
push null
push { type: 'Expression0', value: { evaluate: [Function] } }
success Expression1
{ type: 'Expression1', value: { evaluate: [Function] } }
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
#Skip
push null
push null
push null
#Skip
push null
Plus
push null
push { type: 'Expression1', value: { evaluate: [Function] } }
Expression1
#Skip
push null
push null
push null
#Skip
push null
Minus
push null
push { type: 'Expression1', value: { evaluate: [Function] } }
success Expression
{ type: 'Expression', value: { evaluate: [Function] } }
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Equal
==
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
NotEqual
!=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
LessEqual
<=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
GreaterEqual
>=
next null
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Less
push null
push { type: 'Expression', value: { evaluate: [Function] } }
Expression
#Skip
push null
push null
push null
#Skip
push null
Greater
push null
push { type: 'Expression', value: { evaluate: [Function] } }
#Skip
push null
push null
push null
#Skip
push null
EndOfStatement
push null
push null

success 
success EndOfStatement
{ type: 'EndOfStatement', value: '' }
push { type: 'EndOfStatement', value: '' }
success Statement
{ type: 'Statement', value: { evaluate: [Function] } }
push { type: 'Statement', value: { evaluate: [Function] } }
parser.js: pass
